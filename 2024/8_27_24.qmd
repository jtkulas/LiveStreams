---
title: "R for <br>Authoring!!" 
author: "OOH Session #40...<br>[...Leaflet Maps]{.leaflet}" 
title-slide-attributes: 
  data-background-image:   https://img.pikbest.com/wp/202413/leaves-green-plants-cartoon-drawing-plant-illustration-background_10465601.jpg!w700wp
  data-background-opacity: ".3"
format:
  revealjs:
    mermaid:
      theme: forest
#    output-location: slide           ## column-fragment; inserts blank 2nd slide
    code-overflow: wrap              ## instead of horizontal scroll
    theme: [league, weekly.scss]       ## night & league
    logo: "erg2.png"
    footer-logo-link: "https://ergreports.com/"  ## https://github.com/shafayetShafee/reveal-header#readme
    transition: slide
    background-transition: fade
    mouse-wheel: true                ## yes enables mouse
    preview-links: false             ## true brings up iframe window instead of "site"
    code-annotations: hover 
    html-math-method: 
      method: mathjax        ## LaTeX in code annotations
      url: "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/latest.js?config=TeX-MML-AM_CHTML"
engine: knitr                        ## not picking up inline codes
bibliography: temp.bib
#lightbox: true
filters: 
  - reveal-header          ## extension to add a hyperlink to slide logo
---

```{r, warning=FALSE, message=FALSE}
#devtools::install_github("hadley/emo")        ## if anyone else wants to render
library(fontawesome)
```

## Open Office Hours <br>(`r format(Sys.Date(),"%B %d, %Y")`)

::: {layout="[80,20]"}
::: first-column
-   Recap session #39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`r emo::ji("left_right_arrow")`
-   Focal issue:
    - [[Interactivity]{.electric}](https://quarto.org/docs/interactive/) (`r fontawesome::fa("plug-circle-bolt", fill="#8ffcff")``r fontawesome::fa("plug-circle-bolt", fill="#8ffcff")`)
      + [[Leaflet Maps]{.leaflet2}](https://r-charts.com/spatial/interactive-maps-leaflet/)
-   Shared problem-solving
:::

::: second-column
:::

:::

![](img/title39.JPG){.absolute top="170" right="-120" width="600" height="325"}

# Recap of Session #39: 

## Plotly`r fontawesome::fa("chart-pie", fill="#fdefb2")` [[Interactivity]{.electric}](https://quarto.org/docs/interactive/)`r fontawesome::fa("plug-circle-bolt", fill="#8ffcff")`

::: {.panel-tabset}

### Bubbles `r fontawesome::fa("soap", fill="#b592f1")`

```{r}
#| echo: true
#| output-location: column
#| classes: custom4060
#| fig-width: 6
#| code-line-numbers: "15,16"
library(plotly)

data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv")

data_2007 <- data[which(data$year == 2007),]
data_2007 <- data_2007[order(data_2007$continent, data_2007$country),]
slope <- 2.666051223553066e-05
data_2007$size <- sqrt(data_2007$pop * slope)
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')

fig <- plot_ly(data_2007, x = ~gdpPercap, y = ~lifeExp, color = ~continent, size = ~size, colors = colors,
        type = 'scatter', mode = 'markers', sizes = c(min(data_2007$size), max(data_2007$size)),
        marker = list(symbol = 'circle', sizemode = 'diameter',
                      line = list(width = 2, color = '#FFFFFF')),
        text = ~paste('Country:', country, '<br>Life Expectancy:', lifeExp, '<br>GDP:', gdpPercap,
                      '<br>Pop.:', pop))
fig <- fig %>% layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
         xaxis = list(title = 'GDP per capita (2000 dollars)',
                      gridcolor = 'rgb(255, 255, 255)',
                      range = c(2.003297660701705, 5.191505530708712),
                      type = 'log',
                      zerolinewidth = 1,
                      ticklen = 5,
                      gridwidth = 2),
         yaxis = list(title = 'Life Expectancy (years)',
                      gridcolor = 'rgb(255, 255, 255)',
                      range = c(36.12621671352166, 91.72921793264332),
                      zerolinewidth = 1,
                      ticklen = 5,
                      gridwith = 2),
         paper_bgcolor = 'rgb(243, 243, 243)',
         plot_bgcolor = 'rgb(243, 243, 243)')

fig
```

### Maps `r emo::ji("globe")`

```{r}
#| echo: true
#| output-location: column
#| classes: custom4060
#| fig-width: 8
#| code-line-numbers: "10"

library(plotly)

us_cities = read.csv("https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv")

fig <- us_cities 
fig <- fig %>%
  plot_ly(
    lat = ~lat,
    lon = ~lon,
    marker = list(color = "fuchsia", size=us_cities$Population/60000),
    type = 'scattermapbox',
    hovertext = us_cities[,"City"]) 
fig <- fig %>%
  layout(
    mapbox = list(
      style = 'open-street-map',
      zoom =2.5,
      center = list(lon = -88, lat = 34))) 

fig
```

:::

# Today: 

##  [L]{.leaflet2}[eaflet]{.leaflet_lower}`r emo::ji("leaf_fluttering_in_wind")` [[Interactivity]{.electric}](https://quarto.org/docs/interactive/)`r fontawesome::fa("plug-circle-bolt", fill="#8ffcff")``r fontawesome::fa("plug-circle-bolt", fill="#8ffcff")`

:::: {.columns}

::: {.column width="25%"}

`r fa("check",fill="#228B22")` plotly  
`r fa("circle-xmark",fill="#D22B2B")` leaflet`r emo::ji("leaf_fluttering_in_wind")`  
`r fa("circle-xmark",fill="#D22B2B")` threejs  
`r fa("circle-xmark",fill="#D22B2B")` dygraphs

:::

::: {.column width="75%"}

::: {.panel-tabset}

### leaflet

```{r}
library(leaflet)
library(leaflet.extras)

leaflet() %>%
  addTiles() %>%
  setView(lng = -73, lat = 3.5, zoom = 5) %>%
  addDrawToolbar() 
 
```

### plotly 

```{r}
library(plotly)

df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv")

fig <- df %>%
  plot_ly(type = 'violin') 
fig <- fig %>%
  add_trace(
    x = ~day[df$smoker == 'Yes'],
    y = ~total_bill[df$smoker == 'Yes'],
    legendgroup = 'Yes',
    scalegroup = 'Yes',
    name = 'Yes',
    side = 'negative',
    box = list(
      visible = T
    ),
    meanline = list(
      visible = T
    ),
    color = I("blue")
  ) 
fig <- fig %>%
  add_trace(
    x = ~day[df$smoker == 'No'],
    y = ~total_bill[df$smoker == 'No'],
    legendgroup = 'No',
    scalegroup = 'No',
    name = 'No',
    side = 'positive',
    box = list(
      visible = T
    ),
    meanline = list(
      visible = T
    ),
    color = I("green")
  ) 

fig <- fig %>%
  layout(
    xaxis = list(
      title = ""  
    ),
    yaxis = list(
      title = "",
      zeroline = F
    ),
    violingap = 0,
    violingroupgap = 0,
    violinmode = 'overlay'
  )

fig

```


### threejs 

```{r}
library("threejs")

N     = 20000
theta = runif(N)*2*pi
phi   = runif(N)*2*pi
R     = 1.5
r     = 1.0

x = (R + r*cos(theta))*cos(phi)
y = (R + r*cos(theta))*sin(phi)
z = r*sin(theta)

d = 6
h = 6
t = 2*runif(N) - 1
w = t^2*sqrt(1-t^2)
x1 = d*cos(theta)*sin(phi)*w
y1 = d*sin(theta)*sin(phi)*w

i = order(phi)
j = order(t)
col = c(rainbow(length(phi))[order(i)],
        rainbow(length(t), start=0, end=2/6)[order(j)])

M = cbind(x=c(x, x1), y=c(y, y1), z=c(z, h*t))
scatterplot3js(M, size=0.1, color=col, bg="black", pch=".")
```

### dygraphs 

```{r}
#| warning: false
#| message: false

library(dygraphs)

dygraph(nhtemp, main = "New Haven Temperatures")

dygraph(nhtemp, main = "New Haven Temperatures") %>%
  dyAxis("y", label = "Temp (F)", valueRange = c(40, 60)) %>%
  dyOptions(fillGraph = TRUE, drawGrid = FALSE) %>%
  dyRangeSelector()

```

:::

:::
::::

## `r fontawesome::fa("r-project", fill="#4287f5")` Session Info (`r format(Sys.Date(),"%B %d, %Y")`) Rendering:

```{r}
sessionInfo()
```


