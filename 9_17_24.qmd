---
title: "R for <br>Authoring!!" 
author: "OOH Session #43...<br>[...htmlwidgets]{.widgets}" 
title-slide-attributes: 
  data-background-image:   https://t3.ftcdn.net/jpg/08/33/40/68/360_F_833406846_3RuSGXFSQghqBU6kT1m2tXxTWoVgQr6I.jpg
  data-background-opacity: ".25"
format:
  revealjs:
    mermaid:
      theme: forest
#    output-location: slide           ## column-fragment; inserts blank 2nd slide
    code-overflow: wrap              ## instead of horizontal scroll
    theme: [league, weekly.scss]       ## night & league
    logo: "erg2.png"
    footer-logo-link: "https://ergreports.com/"  ## https://github.com/shafayetShafee/reveal-header#readme
    transition: slide
    background-transition: fade
    mouse-wheel: true                ## yes enables mouse
    preview-links: false             ## true brings up iframe window instead of "site"
    code-annotations: hover 
    html-math-method: 
      method: mathjax        ## LaTeX in code annotations
      url: "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/latest.js?config=TeX-MML-AM_CHTML"
engine: knitr                        ## not picking up inline codes
bibliography: temp.bib
#lightbox: true
filters: 
  - reveal-header          ## extension to add a hyperlink to slide logo
---

```{r, warning=FALSE, message=FALSE}
#devtools::install_github("hadley/emo")        ## if anyone else wants to render
library(fontawesome)
```

## Open Office Hours <br>(`r format(Sys.Date(),"%B %d, %Y")`)

::: {layout="[80,20]"}
::: first-column
-   Recap session #42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`r emo::ji("left_right_arrow")`
-   Focal issue(s):
    - `r fontawesome::fa("plug-circle-bolt", fill="#8ffcff")` [[Interactivity]{.electric}](https://quarto.org/docs/interactive/) `r fontawesome::fa("plug-circle-bolt", fill="#8ffcff")`
      + [htmlwidgets]{.widgets}
-   Shared problem-solving
:::

::: second-column
:::

:::

![](img/title42.JPG){.absolute top="170" right="-120" width="600" height="325"}

# Recap of Session #42: 

## `r emo::ji("chart_increasing")` [[dygraphs]{.dygraphs}](https://dygraphs.com/) `r emo::ji("chart_decreasing")` 

```{r}
#| echo: true
#| output-location: column
#| classes: custom4060

library(dygraphs)

Harris <- c(10,8,14,
          6,9,12,15,
          12,7,13)
Trump <- c(8,13,12,
          4,7,10,13,
          14,10,12)

debate <- ts(                    #<1>
      cbind(Harris,Trump),       #<2>
      frequency=12,              #<3>
      start=c(2023,1))           #<4>

dygraph(debate)
```
1. Creating a `time series` object (from `stats` package -- included in base `r fa("r-project",fill="#6495ED")`)
2. Specifying the data (row sequence important)
3. [One could use a value of 7 for frequency when the data are sampled daily, and the natural time period is a week, or 12 when the data are sampled monthly and the natural time period is a year. Values of 4 and 12 are assumed in (e.g.) print methods to imply a quarterly and monthly series respectively.](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/ts)
4. What year and month to begin (first row)?

# Today: 

## `r emo::ji("gear")``r emo::ji("gear")` [[htmlwidgets]{.widgets}](https://www.htmlwidgets.org/develop_sizing.html) `r emo::ji("gear")``r emo::ji("gear")` 

:::: {.columns}

::: {.column width="25%"}

`r fa("check",fill="#228B22")` plotly  
`r fa("check",fill="#228B22")` [leaflet](https://tomjenkins.netlify.app/tutorials/r-leaflet-introduction/)   
`r fa("check",fill="#228B22")` threejs   
`r fa("check",fill="#228B22")` dygraphs

:::

::: {.column width="75%"}

::: {.panel-tabset}

### plotly 

```{python}
import plotly.graph_objects as go
import pandas as pd

# Read data from a csv
z_data = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv')

fig = go.Figure(data=go.Surface(z=z_data, showscale=False))
fig.update_layout(
    title='Mt Bruno Elevation',
    width=400, height=400,
    margin=dict(t=30, r=0, l=20, b=10)
)

name = 'eye = (x:2, y:2, z:0.1)'
camera = dict(
    eye=dict(x=2, y=2, z=0.1)
)

fig.update_layout(scene_camera=camera, title=name)
fig.show()
```

### leaflet

```{r}
library(leaflet)
library(tidyverse)
# Coordinates of the centre point of the UK: Whitendale Hanging Stones
whitendale = c(-2.547855, 54.00366)

leaflet() %>%
  # Centre map on Whitendale Hanging Stones
  setView(lng = whitendale[1], lat = whitendale[2], zoom = 6) %>% 
  # Add OSM basemap
  addProviderTiles(providers$OpenStreetMap, group = "Open Street Map") %>% 
  # Add additional basemap layers
  addProviderTiles(providers$Esri.WorldImagery, group = "ESRI World Imagery") %>% 
  addProviderTiles(providers$Esri.WorldTerrain, group = "ESRI World Terrain") %>% 
  # Add a User-Interface (UI) control to switch layers
  addLayersControl(
    baseGroups = c("Open Street Map","ESRI World Imagery","ESRI World Terrain"),
    options = layersControlOptions(collapsed = FALSE)
    )
```

### threejs 

```{r}
library(threejs)
data(LeMis)
N  <- length(V(LeMis))

# Vertex page rank values
pr <- page_rank(LeMis)$vector
# order the page rank values
i <- order(pr, decreasing=TRUE)

# Vertex cluster membership
cl <- unclass(membership(cluster_louvain(LeMis)))

# Find the index of the highest page rank vertex in each cluster
idx <- aggregate(seq(1:N)[i], by=list(cl[i]), FUN=head, 1)$x
# Create a default force-directed layout for the whole network
l1 <- norm_coords(layout_with_fr(LeMis, dim=3))
# Collapse the layout to just the idx vertices
l0 <- Reduce(rbind,Map(function(i) l1[idx[i],], cl))

# Grouped vertex colors, setting all but idx vertices transparent
col <- rainbow(length(idx), alpha=0)[cl]
col[idx] <- rainbow(length(idx), alpha=1)

click <- Map(function(i)
{
  x <- l0
  x[cl == i, ] <- l1[cl == i, ]
  c <- col
  c[cl == i] <- rainbow(length(idx), alpha=1)[i]
  list(layout=x, vertex.color=c)
}, seq(idx))
names(click) <- paste(idx)

(graphjs(LeMis, layout=l0, click=click, vertex.color=col, fps=20, font.main="78px Arial"))
```

### dygraphs 

```{r}

library(dygraphs)

lungDeaths <- cbind(ldeaths, mdeaths)

dygraph(lungDeaths, main = "Main Title") %>%
  dySeries("ldeaths", drawPoints = FALSE) %>%
  dySeries("mdeaths", stepPlot = TRUE, fillGraph = TRUE)
```

:::

:::
::::

## `r fontawesome::fa("r-project", fill="#4287f5")` Session Info (`r format(Sys.Date(),"%B %d, %Y")`) Rendering:

```{r}
sessionInfo()
```


