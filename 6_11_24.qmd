---
title: "R for <br>Authoring!!" 
author: "PSP Session #29...<br>...reporting from [Shiny]{.shiny}: Part II"
title-slide-attributes: 
  data-background-image: https://99robots.com/wp-content/uploads/2013/10/6-Copywriting-Tips-That-Will-Boost-Your-Conversion-Rates-scaled.jpg
  data-background-opacity: ".4"
format:
  revealjs:
    output-location: slide           ## column-fragment
    code-overflow: wrap              ## instead of horizontal scroll
    theme: [night, weekly.scss]
    logo: "erg2.png"
    transition: slide
    background-transition: fade
    mouse-wheel: true                ## yes enables mouse
    preview-links: false             ## true brings up iframe window instead of "site"
    code-annotations: hover 
    html-math-method: 
      method: mathjax        ## LaTeX in code annotations
      url: "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/latest.js?config=TeX-MML-AM_CHTML"
engine: knitr                        ## not picking up inline codes
# bibliography: r-references.bib
---

```{r, warning=FALSE, message=FALSE}
#devtools::install_github("hadley/emo")        ## if anyone else wants to render
library(fontawesome)
```

## Problem-Solving Panel <br>(`r format(Sys.Date(),"%B %d, %Y")`)

::: {layout="[80,20]"}
::: first-column
-   Recap session #28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`r emo::ji("left_right_arrow")`
-   Focal issue:
    - [Shiny]{.shiny}`r emo::ji("sparkles")` downloads
      - Data reports `r emo::ji("clipboard")`
-   Shared problem-solving
:::

::: second-column
:::
:::

![](img/title28.JPG){.absolute top="170" right="-120" width="550" height="325"}

# Recap of Session #28: 

## .Rmd report `r fa("download",fill="#0077b5")`'s from [Shiny]{.shiny}`r emo::ji("sparkles")` 

```{r}
#| echo: true
#| code-line-numbers: "28,67-75"

library(shiny)
library(DT)
library(ggplot2)

# Sample dataset
data <- data.frame(
  ID = 1:10,
  Name = c("John", "Paul", "George", "Ringo", "Mick", "Keith",
"Charlie", "Ronnie", "Roger", "Pete"),
  Age = c(40, 42, 38, 41, 43, 45, 39, 40, 44, 42)
)

# Define UI
ui <- fluidPage(
  titlePanel("Download CSV Example"),
  fluidRow(
    sidebarPanel(
      sliderInput('ageRange', 'Age Range', 
                  min = 30, 
                  max = 45, 
                  value = c(30, 45)),
      plotOutput("distPlot"),
      downloadButton("downloadPlot", "Download Histogram")
    ),
    mainPanel(
      DTOutput("table"),
      downloadButton("downloadData", "Download CSV"),
      downloadButton("downloadReport", "Download Report")      #<1>
      )
  )
)

# Define server logic
server <- function(input, output) {
  # Reactive expression to filter data based on age range
  filtered_data <- reactive({
    data[data$Age >= input$ageRange[1] & data$Age <= input$ageRange[2], ]
  })
  
  # Display the table
  output$table <- renderDT({
    filtered_data()
  })
  
  # Download handlers
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("data-", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(filtered_data(), file, row.names = FALSE)
    }
  )

## Copied from above (that works) - want to download image; 5/28/24
  output$downloadPlot <- downloadHandler(          
    filename = function() {
      paste("data-", Sys.Date(), ".png", sep = "")
    },
    content = function(file) {
      png(file)
      print(ggplot(filtered_data(),aes(x=Age)) + geom_histogram()
)
      dev.off()
    }
  )
  
  output$downloadReport <- downloadHandler(                     #<2>
    filename = function() {
      paste("data-", Sys.Date(), ".pdf", sep = "")
    },
    content = function(file) {
      render("child_script.Rmd", output_format="pdf_document")
    }
  )                                                            #<2>
  
  output$distPlot <- renderPlot({
    # generate bins based on input$bins from ui.R
#    x    <- filtered_data$Age
#    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    
    # draw the histogram with the specified number of bins
    ggplot(filtered_data(),aes(x=Age)) + geom_histogram()
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```
1. Works fine
2. Missing something - [will work on this](https://stackoverflow.com/questions/65786335/how-can-you-make-customized-downloadable-reports-in-r-shiny) today

# Today: 

## Different [`r fa("download",fill="#0077b5")`'s](https://mastering-shiny.org/action-transfer.html) from [Shiny]{.shiny}`r emo::ji("sparkles")`

:::: {.columns}
::: {.column width="30%"}
+ Data `r fa("check",fill="#228B22")`
+ Figure `r fa("check",fill="#228B22")`
+ Report `r fa("circle-xmark",fill="#D22B2B")`
<br>
<br>
+ Quarto `r emo::ji("eyes")`

::: {.callout-tip}
## General structure 

[Nice tutorial](https://tilburgsciencehub.com/topics/visualization/data-visualization/dashboarding/shiny-apps/) on scripting [Shiny]{.shiny2} apps
:::

:::

::: {.column width="60%"}
![](https://cdnwebsite.databox.com/wp-content/uploads/2023/11/30094738/HS-for-CS-1000x554.png){.absolute height="500" right="-200"}

:::
::::

## `r fontawesome::fa("r-project", fill="#4287f5")` Session Info (`r format(Sys.Date(),"%B %d, %Y")`) Rendering:

```{r}
sessionInfo()
```

